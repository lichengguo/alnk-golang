package split_string

import (
	"testing"
	"time"
)

/*
[重置时间]
b.ResetTimer之前的处理不会放到执行时间里，也不会输出到报告中，所以可以在之前做一些不计划作为测试报告的操作
*/

func BenchmarkSplit(b *testing.B) {
	time.Sleep(5 * time.Second) // 假设需要做一些耗时的无关操作
	b.ResetTimer()              // 重置计时器
	for i := 0; i < b.N; i++ {
		Split("沙河有沙又有河", "沙")
	}
}

/*
注释掉 b.ResetTimer() 的结果 刚看的时候可能以为是错的，总耗时居然比没注释还要少
但是看他的执行次数是1次，平均每次耗时 5005160299 ns
lichengguo@lichengguodeMacBook-Pro split_string % go test -bench=.
goos: darwin
goarch: amd64
pkg: code.oldboyedu.com/gostudy/day09/04test_split/split_string
BenchmarkSplit-4               1        5005160299 ns/op
PASS
ok      code.oldboyedu.com/gostudy/day09/04test_split/split_string      5.012s

没注释 b.ResetTimer() 的结果
lichengguo@lichengguodeMacBook-Pro split_string % go test -bench=.
goos: darwin
goarch: amd64
pkg: code.oldboyedu.com/gostudy/day09/04test_split/split_string
BenchmarkSplit-4         5357868               191 ns/op
PASS
ok      code.oldboyedu.com/gostudy/day09/04test_split/split_string      26.285s
*/
