package split_string

import "testing"

/*
[并行测试]
b.RunParallel 会创建出多个goroutine，并将b.N分配给这些goroutine执行
其中goroutine数量的默认值为GOMAXPROCS
用户如果想要增加非CPU受限（non-CPU-bound）基准测试的并行性
那么可以在RunParallel之前调用SetParallelism

RunParallel通常会与-cpu标志一同使用
还可以通过在测试命令后添加-cpu参数如 go test -bench=. -cpu 1 来指定使用的CPU数量
*/

func BenchmarkSplitParallel(b *testing.B) {
	//b.SetParallelism(1) // 设置使用cpu的数
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			Split("沙河有沙又有河", "沙")
		}
	})
}

/*
单核心
lichengguo@lichengguodeMacBook-Pro split_string % go test -bench=. -cpu 1
goos: darwin
goarch: amd64
pkg: code.oldboyedu.com/gostudy/day09/04test_split/split_string
BenchmarkSplitParallel   7113730               170 ns/op
PASS
ok      code.oldboyedu.com/gostudy/day09/04test_split/split_string      1.390s

4核心
lichengguo@lichengguodeMacBook-Pro split_string % go test -bench=. -cpu 4
goos: darwin
goarch: amd64
pkg: code.oldboyedu.com/gostudy/day09/04test_split/split_string
BenchmarkSplitParallel-4        13540974                87.3 ns/op
PASS
ok      code.oldboyedu.com/gostudy/day09/04test_split/split_string      1.279s
可以看出4核心平均每次执行的效果还是比单核心快了一倍

2核心
lichengguo@lichengguodeMacBook-Pro split_string % go test -bench=. -cpu 2
goos: darwin
goarch: amd64
pkg: code.oldboyedu.com/gostudy/day09/04test_split/split_string
BenchmarkSplitParallel-2        12745449                89.6 ns/op
PASS
ok      code.oldboyedu.com/gostudy/day09/04test_split/split_string      1.245s

*/
